# # -*- mode: restclient; url-max-redirections: 0 -*-
# # Emacs restclient examples for httpbin.org
# # http://httpbin.org/: HTTP Request & Response Service

# # Returns Origin IP.
# GET http://httpbin.org/ip

# # Returns user-agent.
# GET http://httpbin.org/user-agent
# User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0

# # Returns header dict.
# GET http://httpbin.org/headers

# # Returns GET data.
# GET http://httpbin.org/get?some=example&params=for&testing=restclient

# Returns header dict.
:host = 127.0.0.1:8081
:usrcount = 0

GET http://:host/auth/

# http://:host/
# GET Categories
GET http://:host/categories/

# AUTH
GET http://:host/auth/dash

# # Registration
POST http://:host/auth/
Content-Type: application/json
{
    "email": "a@mail.home",
    "hashed_password": "demo123"
}

# # Confirmation
POST http://:host/auth/confirm
Content-Type: application/json
{
  "code": "48201",
  "session_id": 64,
  "session_verifier": "1d1328ca57d2c522aaaedd6e8da490849ef0fc96e60ebfdb0d930f115435a334"
}


# # login
POST http://:host/auth/login
Content-Type: application/json
{
    "email": "a@mail.home",
    "hashed_password": "demo123"
}


# AUTH after login
:cookie=session=bS6sK5lcJI2XAgz7GDythPuWwZIDKyNtuA9aNc%2FSnbVH%2FoCb6FRi0FqDmnUU56vGtqqOZWKFBtacryTr2AXwPQAUcQ9Lfv%2FUWyvZ4PkhCWBOXzo4AI6QtMPkRJQYuaxr6mfnnVZuOX3YGNd04sgE1PFnz9O6TibTuYne9tfUjuKencOA3YCA%2FY5kNodMIk2xNi2fV3MLACrC4t0uz7NQLy7pTczB99atogDGZ04NbbOnZ4g2ja1M++ftaLTW64J+ZBscGD9684dLuZahrvmfTera5Q%3D%3D
GET http://:host/auth/
Cookie: :cookie

# Auth with session
GET http://:host/auth/

# set-cookie: auth-middleware=iig6Nje20gV5q9JQ9WNv%2FUy8m1y2ZCmH+2JNNYo978hA9Pk9w%2Fys50F5qFtvxOX%2F+MiPvi5w8nCzfTXVzLibCgjBN4tvUQeaq5860iWLF+tR0V9Xp%2FWzrXVgSYVtnnto+DMfhvVg1XW75mxxhuK+N7%2FRrEeGXCi9RQWdIkMKfjjQq1vOEzqGMj9YC16IPoZEmNftKx+Uq%2FFAxL9Gpod+b1gTKtipbx2MRVnKBxgV9BoXLi5AIdrFDCpMbL3lg2zwJWtf1EoXuNsc8B94XyssHDpF8A%3D%3D; HttpOnly; SameSite=Lax; Path=/; Domain=localhost; Max-Age=86400


# {
#   "session_id": 66,
#   "session_verifier": "55e641cfe884c2ad708d9d6518701af4ffe3ae3e94a347370982ed41049c6f4d",
#   "master_key_hash": null
# }


# # password reset
POST http://:host/auth/reset
Content-Type: application/json
{
    "email": "aaab@mail.home"
}


## Password Change
GET http://:host/auth/change?reset_password_selector=Jm9Q2yPVcvs&reset_password_validator=oz1XIDMs9SWFa6oaoBQ8RdMenFGtYyfH


# {
#   "otp": {
#     "code": "50910"
#   },
#   "session": {
#     "session_id": 54,
#     "session_verifier": "9958066362ebd73fdb07d01769560ed62dff2429cb61da13177d336161678aa1",
#     "master_key_hash": null
#   }
# }

# {
#   "session_id": 54,
#   "session_verifier": "9958066362ebd73fdb07d01769560ed62dff2429cb61da13177d336161678aa1",
#   "master_key_hash": null
# }

# # Content type is loosely matched, could be application/vnd.whatever+json
# GET http://httpbin.org/response-headers?Content-Type=application/vnd.whatever%2Bjson;%20charset=UTF-8
# -> on-response (message "dynamic hook called %s %s"
# (random ) (random ))
# -> on-response (message "another hook")


# # Content type is loosely matched, could be application/vnd.whatever+json
# GET http://httpbin.org/response-headers?Content-Type=application/something%2Bjson

# # Returns PUT data.
# PUT http://httpbin.org/put
# Content-Type: application/json

# {
#     "name": "emacs",
#     "awesomness": 9042
# }

# # Returns PATCH data.
# PATCH http://httpbin.org/patch
# Content-Type: application/xml

# [
#     {
#         "replace": "/awesomness",
#         "value": 9043
#     }
# ]

# # Returns DELETE data
# DELETE http://httpbin.org/delete
# If-Match: "*"

# # HTTP Status codes
# # 404
# GET http://httpbin.org/status/404
# # 200
# GET http://httpbin.org/status/200

# # Returns given response headers.
# GET http://httpbin.org/response-headers?key=val

# # cookie data.
# GET http://httpbin.org/cookies
# Cookie: name=restclient

# # HTTPBasic Auth.
# :example-auth := (format "Basic %s" (base64-encode-string (format "%s:%s" "user" "password")))
# GET http://httpbin.org/basic-auth/user/password
# Authorization: :example-auth

# # Returns some XML
# GET http://httpbin.org/xml

# # Test for unicode
# PUT http://httpbin.org/put
# Content-Type: application/json

# {
#     "text": "\u2018a"
# }

# # Localhost bug test
# GET http://localhost:3000

# # Magic mode matching test
# GET http://httpbin.org/response-headers?Content-Type=whatever/braindamage

# # UTF-8 encoding test
# PUT http://httpbin.org/put
# Content-Type: application/json

# {
#     "text": "привет",
#     "text2": "João Sá",
#     "text3": "João"
# }
# #
# POST http://httpbin.org/post

# pwd=1234
# #
# : = foo\bar
# POST http://httpbin.org/post

# :foo

# #
# # Variables
# #
# :auth-token = abcd1234
# :number := (+ 1 2 3 4)
# :text := (concat "This is " ":num" "ber")
# #
# # Multiline variable referencing another variable
# #
# :my-ip = "123.1.1.1"
# :common-headers = <<
# Authentication: :auth-token
# User-Agent: MyApp/1.0 | Other app :my-ip
# Content-type: application/json
# #
# # ...and another one
# :common-body = <<
# { "number": :number, "text": ":text" }
# #
# # Now, use them both in request
# #
# POST http://httpbin.org/post?q=1
# :common-headers

# :common-body
# # ...and another example
# POST http://httpbin.org/post?q=2
# :common-headers

# {
#     "other": "body",
#     "common": :common-body
# }

# # File upload
# PUT http://httpbin.org/put
# Content-type: text/plain

# < /etc/passwd
# # Test for issue #121
# POST http://httpbin.org/post

# {"json": "that looks like header"}
# #
# POST http://httpbin.org/post
# Content-Type: text/xml

# <?xml version="1.0" encoding="utf-8"?>
# <AAA xmlns="ns"
#      another-attr="x">
# </AAA>
# #
# GET http://httpbin.org/redirect-to?url=http%3A%2F%2Fexample.com%2F
# #
# :cookie=B=db9s6bpclha4g&b=3&s=eq

# POST http://httpbin.org/post
# Cookie: :cookie

# # ================================================================================================
# # dynamic per-request hooks

# # multi-line elisp expression called on completion
# GET http://httpbin.org/response-headers?Content-Type=application/vnd.whatever%2Bjson;%20charset=UTF-8
# -> run-hook (message "dynamic hook called %s %s"
#                   (random ) (random ))

# # set a variable to the value of your ip address using a jq expression
# GET http://httpbin.org/ip
# -> jq-set-var :my-ip .origin

# # multiple elsip hooks on call
# GET http://httpbin.org/response-headers?Content-Type=application/vnd.whatever%2Bjson;%20charset=UTF-8
# -> run-hook (message "hook 1")
# -> run-hook (message "hook 2")

# # set basic auth from vars & referencing vars in hooks
# :user = jack
# :password = secret
# :test-me := (format "%s:%s" ":user" ":password")
# :auth-token :=  (format "Basic %s" (base64-encode-string (restclient-get-var ":test-me")))

# GET http://httpbin.org/basic-auth/jack/secret
# Authorization: :auth-token
# -> run-hook (message (format "authenticated with '%s'" (restclient-get-var ":auth-token")))
